NAME
    Catalyst::View::ByCode - Templating using pure Perl code

SYNOPSIS
        # 1) use the helper to create your View
        myapp_create.pl view ByCode ByCode

        # 2) inside your Controllers do business as usual:
        sub index :Path :Args(0) {
            my ($self, $c) = @_;
        
            $c->stash->{current_view} = 'ByCode';
        
            $c->stash->{title} = 'Hello ByCode';
            $c->stash->{template} = 'hello.pl';
        }

        # 3) create a simple template eg 'root/bycode/hello.pl
        # REMARK: 
        #    use 'c' instead of '$c'
        #    prefer 'stash->{...}' to 'c->stash->{...}'
        html {
            head {
                title { c->stash->{title} };
                load Js => 'site.js';
                load Css => 'site.js';
            };
            body {
                div header.noprint {
                    ul.topnav {
                        li {'home'};
                        li {'surprise'};
                    };
                };
                div content {
                    h1 { c->stash->{title} };
                    div { 'hello.pl is running! };
                    img(src => '/static/images/catalyst_logo.png');
                };
            };
        };
        # 266 characters without white space
    
        # 4) expect to get this HTML generated:
        <html>
          <head>
            <title>Hello ByCode!</title>
            <script src="http://localhost:3000/js/site.js" type="text/javascript">
            </script>
            <link rel="stylesheet" href="http://localhost:3000/css/site.css" type="text/css" />
          </head>
          <body>
            <div id="header" style="noprint">
              <ul class="topnav">
                <li>home</li>
                <li>surprise</li>
              </ul>
            </div>
            <div class="content">
              <h1>Hello ByCode!</h1>
              <div>hello.pl is running!</div>
              <img src="/static/images/catalyst_logo.png" />
            </div>
          </body>
        </html>
        # 453 characters without white space

DESCRIPTION
    `Catalyst::View::ByCode' tries to offer an efficient, fast and robust
    solution for generating HTML and XHTML markup using standard perl code
    encapsulating all nesting into code blocks.

    Instead of typing opening and closing HTML-Tags we simply call a sub
    named like the tag we want to generate:

        div { 'hello' }
    
    generates:

        <div>hello</div>

    There is no templating language you will have to learn, no quirks with
    different syntax rules your editor might not correctly follow and no
    indentation problems.

    The whole markup is initially constructed as a huge tree-like structure
    in memory keeping every reference as long as possible to allow greatest
    flexibility and enable deferred construction of every building block
    until the markup is actially requested.

    Every part of the markup can use almost every type of data with some
    reasonable behavior during markup generation.

  Tags
    Every tag known in HTML (or defined in HTML::Tagset to be precise) gets
    exported to a template's namespace during its compilation and can be
    used as expected. However, there are some exceptions which would collide
    with CORE subs or operators

    choice      generates a <select> tag

    link_tag    generates a <link> tag

    trow        generates a <tr> tag

    tcol        generates a <td> tag

    subscript   generates a <sub> tag

    superscript generates a <sup> tag

    Internally, every tag subroutine is defined with a prototype like

        sub div(;&@) { ... }

    Thus, the first argument of this sub is expected to be a coderef, which
    allows to write code like the examples above. Nesting tags is just a
    matter of nesting calls into blocks.

  Content
    There are several ways to generate content which is inserted between the
    opening and the closing tag:

        The return value of the last expression of a code block will get
        appended to the content inside the tag. The content will get escaped
        when needed.

        To append any content (getting escaped) at any point of the markup
        generation, the `OUT' glob can be used:

            print OUT 'some content here.';

        To append unescaped content eg JavaScript or the content of another
        markup-generating subsystem like `HTML::FormFu' simple use the <RAW>
        glob:

            print RAW '<?xxx must be here for internal reasons ?>';

  Attributes
        As usual for Perl, there is always more than one way to do it:

        prefixing or appending
            Every tag may get prefixed or appended by a `with' method
            containing all attributes that should go into the opening tag.

                # prefixing
                with {id => 'top', 
                      class => 'noprint silver', 
                      style => 'display: none'} div {'content'};
    
                # prefixing using other data types
                with {id => 'top', 
                      class => [qw(noprint silver)], 
                      style => {display => 'none'}} div {'content'};
    
                # using 'with' more than once
                with {id => 'top'}
                with {class => 'noprint silver'}
                div {'content'}
                with {style => 'display: none'};
    
                # always generates this:
                <div id="top" class="noprint silver" style="display: none">content</div>

        special content
                # using special methods
                div {
                    id 'top';
                    class 'noprint silver';
                    attr style => 'display: none';
        
                    'content'
                };

        tricky arguments
                div top.noprint.silver(style => 'display none') {'content'}

  Special Methods
        doctype
        load

CONFIGURATION
        A simple configuration of a dereived Controller could look like
        this:

            __PACKAGE__->config(
                # Change extension (default: .pl)
                extension => '.pl',
        
                # Set the location for .pl files (default: root/bycode)
                root_dir => cat_app->path_to( 'root', 'bycode' ),
        
                # This is your wrapper template located in root_dir (default: wrapper.pl)
                wrapper => 'wrapper.pl',
            );

METHODS
  process
        fulfill the request (called from Catalyst)

  render
        render the request

AUTHOR
        Wolfgang Kinkeldei, <wolfgang@kinkeldei.de>

LICENSE
        This library is free software, you can redistribute it and/or modify
        it under the same terms as Perl itself.

