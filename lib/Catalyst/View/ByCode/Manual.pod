=head1 NAME

Catalyst::View::ByCode::Manual - A simple usage guide



=head1 CONFIGURATION





=head1 TRICKS

=head2 A Simple template

If you have eg. an C<index> action inside your C<Root> controller, a template
named F<index.pl> could look like:

    template {
        html {
            head {
                title { stash->{title} };
            };
            body {
                div header.noprint {
                    ul.topnav {
                        li { 'home' };
                        li { 'surprise' };
                    };
                };
                div content {
                    h1 { stash->{title} };
                    div { 'index.pl is running!' };
                    img(src => '/static/images/catalyst_logo.png');
                };
            };
        };
    };

What happens behind the scenes?

C<template {}> basically is the same as if you specified C<sub RUN {}>.

=head2 Creating tags

Every HTML-Tag is defined as a sub like C<sub html(&;@) { ... }>. Thus, the
structure of your markup can be expressed as properly nested tags. Every tag
should end with a semicolon to divide this expresssion from the following
expression.

Some dark magic behind the scenes allows a tag to be followed optionally but
in this sequence by

=over

=item an ID

if you specify an identifier starting with a letter and only consisting of
letters, digits or the underscore character, it is treated as an ID that is
appended to the tag's attributes.

    div topnav { ... }       # will yield <div id="topnav"> ... </div>

=item one or more class names

every word starting with a period is regarded as a class name.

    div.bodytext { ... }     # will yield <div class="bodytext"> ... </div>
    div foo.body { ... }     # will yield <div id="foo" class="body"> ... </div>

=item a list of attributes

specifying attributes may be done using a typical perl list enclosed in
parenthesis.

    div(x => 'bar') { ... }  # will yield <div foo="bar"> ... </div>

=back

=head2 Using a wrapper

=head2 Setting hooks at various places

=head2 Avoiding repetitions

=head2 Including FormFu or FormHandler

=head2 Create your own error page



=head1 TRICKS

=head2 Shortcuts
- TODO: input(disabled => 1) instead of input(disabled => 'disabled')
- TODO: input(checked => 1) instead of input(disabled => 'checked')
- TODO: option(selected => 1) instead of option(selected => 'selected')

some_tag.some_class {
    class '+another_class';
}



=head1 CAVEATS

=cut
